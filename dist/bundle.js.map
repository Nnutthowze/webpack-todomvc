{"version":3,"sources":["webpack:///bundle.js","webpack:///webpack/bootstrap 4b817a742be0ac36b7e5","webpack:///./helpers.js","webpack:///./app.js","webpack:///./bootstrap.js","webpack:///./controller.js","webpack:///./model.js","webpack:///./store.js","webpack:///./template.js","webpack:///./view.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","i","l","call","m","c","value","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","window","qs","selector","scope","document","querySelector","qsa","querySelectorAll","log","console","apply","arguments","$on","target","type","callback","useCapture","addEventListener","$delegate","handler","dispatchEvent","event","targetElement","potentialElements","Array","indexOf","$parent","element","tagName","parentNode","toLowerCase","remove","array","thing","index","splice","leftPad","str","size","padWith","length","join","NodeList","forEach","Todo","this","storage","app","Store","model","Model","template","Template","view","View","controller","Controller","onLoad","setView","location","hash","that","bind","title","addItem","item","editItem","id","editItemSave","editItemCancel","removeItem","toggleComplete","completed","removeCompletedItems","status","toggleAll","locationHash","route","split","page","_updateFilterState","showAll","read","data","render","showActive","showCompleted","trim","create","_filter","update","silent","_updateCount","getCount","todos","active","visible","checked","total","force","activeRoute","_activeRoute","charAt","toUpperCase","substr","_lastActiveRoute","currentPage","_typeof","Symbol","iterator","obj","constructor","newItem","save","query","queryType","findAll","parseInt","find","removeAll","drop","todo","_dbName","localStorage","JSON","stringify","parse","filter","q","updateData","key","Date","getTime","push","defaultTemplate","htmlEscapes","&","<",">","\"","'","`","escapeHtmlChar","chr","reHasUnescapedHtml","RegExp","source","escape","string","test","replace","show","itemCounter","activeTodos","clearCompletedButton","completedTodos","ENTER_KEY","ESCAPE_KEY","$todoList","$todoItemCounter","$clearCompleted","$main","$footer","$toggleAll","$newTodo","_removeItem","elem","removeChild","_clearCompletedButton","completedCount","innerHTML","style","display","_setFilter","className","_elementComplete","listItem","_editItem","input","createElement","appendChild","focus","_editItemDone","label","textContent","viewCmd","parameter","showEntries","updateElementCount","contentBlockVisibility","setFilter","clearNewTodo","elementComplete","editItemDone","_itemId","li","dataset","_bindItemEditDone","iscanceled","keyCode","blur","_bindItemEditCancel"],"mappings":"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","file":"bundle.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/src/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 2);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*global NodeList */\n(function (window) {\n  'use strict';\n\n  // Get element(s) by CSS selector:\n\n  window.qs = function (selector, scope) {\n    return (scope || document).querySelector(selector);\n  };\n\n  window.qsa = function (selector, scope) {\n    return (scope || document).querySelectorAll(selector);\n  };\n\n  window.log = function log() {\n    if (window.console && window.console.log) {\n      window.console.log.apply(window.console, arguments); // eslint-disable-line\n    }\n  };\n\n  // addEventListener wrapper:\n  window.$on = function (target, type, callback, useCapture) {\n    target.addEventListener(type, callback, !!useCapture);\n  };\n\n  // Attach a handler to event for all elements that match the selector,\n  // now or in the future, based on a root element\n  window.$delegate = function (target, selector, type, handler) {\n    function dispatchEvent(event) {\n      var targetElement = event.target;\n      var potentialElements = window.qsa(selector, target);\n      var hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0;\n\n      if (hasMatch) {\n        handler.call(targetElement, event);\n      }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/Events/blur\n    var useCapture = type === 'blur' || type === 'focus';\n\n    window.$on(target, type, dispatchEvent, useCapture);\n  };\n\n  // Find the element's parent with the given tag name:\n  // $parent(qs('a'), 'div');\n  window.$parent = function (element, tagName) {\n    if (!element.parentNode) {\n      return;\n    }\n    if (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase()) {\n      return element.parentNode;\n    }\n    return window.$parent(element.parentNode, tagName);\n  };\n\n  // removes an element from an array\n  // const x = [1,2,3]\n  // remove(x, 2)\n  // x ~== [1,3]\n  window.remove = function remove(array, thing) {\n    var index = array.indexOf(thing);\n    if (index === -1) {\n      return array;\n    }\n    array.splice(index, 1);\n  };\n\n  // pad the left of the given string by the given size with the given character\n  // leftPad('10', 3, '0') -> 010\n  window.leftPad = function leftPad(str, size, padWith) {\n    if (size <= str.length) {\n      return str;\n    } else {\n      return Array(size - str.length + 1).join(padWith || '0') + str;\n    }\n  };\n\n  // Allow for looping on nodes by chaining:\n  // qsa('.foo').forEach(function () {})\n  NodeList.prototype.forEach = Array.prototype.forEach;\n})(window);\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/* global app, log */\n__webpack_require__(8);\n\n__webpack_require__(7);\n__webpack_require__(0);\n__webpack_require__(3);\n__webpack_require__(4);\n__webpack_require__(5);\n__webpack_require__(6)(function (window) {\n  'use strict';\n\n  /**\n   * Sets up a brand new Todo list.\n   *\n   * @param {string} name The name of your new to do list.\n   */\n\n  function Todo(name) {\n    this.storage = new app.Store(name);\n    this.model = new app.Model(this.storage);\n    this.template = new app.Template();\n    this.view = new app.View(this.template);\n    this.controller = new app.Controller(this.model, this.view);\n  }\n\n  function onLoad() {\n    var todo = new Todo('todos-vanillajs');\n    todo.controller.setView(document.location.hash);\n    log('view set');\n  }\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.onLoad = onLoad;\n})(window);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* global app, $on */\n\n\n\n__webpack_require__(1);\n__webpack_require__(0);\n\n$on(window, 'load', app.onLoad);\n$on(window, 'hashchange', app.onLoad);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (window) {\n  'use strict';\n\n  /**\n   * Takes a model and view and acts as the controller between them\n   *\n   * @constructor\n   * @param {object} model The model instance\n   * @param {object} view The view instance\n   */\n\n  function Controller(model, view) {\n    var that = this;\n    that.model = model;\n    that.view = view;\n\n    that.view.bind('newTodo', function (title) {\n      that.addItem(title);\n    });\n\n    that.view.bind('itemEdit', function (item) {\n      that.editItem(item.id);\n    });\n\n    that.view.bind('itemEditDone', function (item) {\n      that.editItemSave(item.id, item.title);\n    });\n\n    that.view.bind('itemEditCancel', function (item) {\n      that.editItemCancel(item.id);\n    });\n\n    that.view.bind('itemRemove', function (item) {\n      that.removeItem(item.id);\n    });\n\n    that.view.bind('itemToggle', function (item) {\n      that.toggleComplete(item.id, item.completed);\n    });\n\n    that.view.bind('removeCompleted', function () {\n      that.removeCompletedItems();\n    });\n\n    that.view.bind('toggleAll', function (status) {\n      that.toggleAll(status.completed);\n    });\n  }\n\n  /**\n   * Loads and initialises the view\n   *\n   * @param {string} '' | 'active' | 'completed'\n   */\n  Controller.prototype.setView = function (locationHash) {\n    var route = locationHash.split('/')[1];\n    var page = route || '';\n    this._updateFilterState(page);\n  };\n\n  /**\n   * An event to fire on load. Will get all items and display them in the\n   * todo-list\n   */\n  Controller.prototype.showAll = function () {\n    var that = this;\n    that.model.read(function (data) {\n      that.view.render('showEntries', data);\n    });\n  };\n\n  /**\n   * Renders all active tasks\n   */\n  Controller.prototype.showActive = function () {\n    var that = this;\n    that.model.read({ completed: false }, function (data) {\n      that.view.render('showEntries', data);\n    });\n  };\n\n  /**\n   * Renders all completed tasks\n   */\n  Controller.prototype.showCompleted = function () {\n    var that = this;\n    that.model.read({ completed: true }, function (data) {\n      that.view.render('showEntries', data);\n    });\n  };\n\n  /**\n   * An event to fire whenever you want to add an item. Simply pass in the event\n   * object and it'll handle the DOM insertion and saving of the new item.\n   */\n  Controller.prototype.addItem = function (title) {\n    var that = this;\n\n    if (title.trim() === '') {\n      return;\n    }\n\n    that.model.create(title, function () {\n      that.view.render('clearNewTodo');\n      that._filter(true);\n    });\n  };\n\n  /*\n   * Triggers the item editing mode.\n   */\n  Controller.prototype.editItem = function (id) {\n    var that = this;\n    that.model.read(id, function (data) {\n      that.view.render('editItem', { id: id, title: data[0].title });\n    });\n  };\n\n  /*\n   * Finishes the item editing mode successfully.\n   */\n  Controller.prototype.editItemSave = function (id, title) {\n    var that = this;\n    if (title.trim()) {\n      that.model.update(id, { title: title }, function () {\n        that.view.render('editItemDone', { id: id, title: title });\n      });\n    } else {\n      that.removeItem(id);\n    }\n  };\n\n  /*\n   * Cancels the item editing mode.\n   */\n  Controller.prototype.editItemCancel = function (id) {\n    var that = this;\n    that.model.read(id, function (data) {\n      that.view.render('editItemDone', { id: id, title: data[0].title });\n    });\n  };\n\n  /**\n   * By giving it an ID it'll find the DOM element matching that ID,\n   * remove it from the DOM and also remove it from storage.\n   *\n   * @param {number} id The ID of the item to remove from the DOM and\n   * storage\n   */\n  Controller.prototype.removeItem = function (id) {\n    var that = this;\n    that.model.remove(id, function () {\n      that.view.render('removeItem', id);\n    });\n\n    that._filter();\n  };\n\n  /**\n   * Will remove all completed items from the DOM and storage.\n   */\n  Controller.prototype.removeCompletedItems = function () {\n    var that = this;\n    that.model.read({ completed: true }, function (data) {\n      data.forEach(function (item) {\n        that.removeItem(item.id);\n      });\n    });\n\n    that._filter();\n  };\n\n  /**\n   * Give it an ID of a model and a checkbox and it will update the item\n   * in storage based on the checkbox's state.\n   *\n   * @param {number} id The ID of the element to complete or uncomplete\n   * @param {object} checkbox The checkbox to check the state of complete\n   *                          or not\n   * @param {boolean|undefined} silent Prevent re-filtering the todo items\n   */\n  Controller.prototype.toggleComplete = function (id, completed, silent) {\n    var that = this;\n    that.model.update(id, { completed: completed }, function () {\n      that.view.render('elementComplete', {\n        id: id,\n        completed: completed\n      });\n    });\n\n    if (!silent) {\n      that._filter();\n    }\n  };\n\n  /**\n   * Will toggle ALL checkboxes' on/off state and completeness of models.\n   * Just pass in the event object.\n   */\n  Controller.prototype.toggleAll = function (completed) {\n    var that = this;\n    that.model.read({ completed: !completed }, function (data) {\n      data.forEach(function (item) {\n        that.toggleComplete(item.id, completed, true);\n      });\n    });\n\n    that._filter();\n  };\n\n  /**\n   * Updates the pieces of the page which change depending on the remaining\n   * number of todos.\n   */\n  Controller.prototype._updateCount = function () {\n    var that = this;\n    that.model.getCount(function (todos) {\n      that.view.render('updateElementCount', todos.active);\n      that.view.render('clearCompletedButton', {\n        completed: todos.completed,\n        visible: todos.completed > 0\n      });\n\n      that.view.render('toggleAll', { checked: todos.completed === todos.total });\n      that.view.render('contentBlockVisibility', { visible: todos.total > 0 });\n    });\n  };\n\n  /**\n   * Re-filters the todo items, based on the active route.\n   * @param {boolean|undefined} force  forces a re-painting of todo items.\n   */\n  Controller.prototype._filter = function (force) {\n    var activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1);\n\n    // Update the elements on the page, which change with each completed todo\n    this._updateCount();\n\n    // If the last active route isn't \"All\", or we're switching routes, we\n    // re-create the todo item elements, calling:\n    //   this.show[All|Active|Completed]();\n    if (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n      this['show' + activeRoute]();\n    }\n\n    this._lastActiveRoute = activeRoute;\n  };\n\n  /**\n   * Simply updates the filter nav's selected states\n   */\n  Controller.prototype._updateFilterState = function (currentPage) {\n    // Store a reference to the active route, allowing us to re-filter todo\n    // items as they are marked complete or incomplete.\n    this._activeRoute = currentPage;\n\n    if (currentPage === '') {\n      this._activeRoute = 'All';\n    }\n\n    this._filter();\n\n    this.view.render('setFilter', currentPage);\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.Controller = Controller;\n})(window);\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function (window) {\n  'use strict';\n\n  /**\n   * Creates a new Model instance and hooks up the storage.\n   *\n   * @constructor\n   * @param {object} storage A reference to the client side storage class\n   */\n\n  function Model(storage) {\n    this.storage = storage;\n  }\n\n  /**\n   * Creates a new todo model\n   *\n   * @param {string} [title] The title of the task\n   * @param {function} [callback] The callback to fire after the model is created\n   */\n  Model.prototype.create = function (title, callback) {\n    title = title || '';\n    callback = callback || function () {};\n\n    var newItem = {\n      title: title.trim(),\n      completed: false\n    };\n\n    this.storage.save(newItem, callback);\n  };\n\n  /**\n   * Finds and returns a model in storage. If no query is given it'll simply\n   * return everything. If you pass in a string or number it'll look that up as\n   * the ID of the model to find. Lastly, you can pass it an object to match\n   * against.\n   *\n   * @param {string|number|object} [query] A query to match models against\n   * @param {function} [callback] The callback to fire after the model is found\n   *\n   * @example\n   * model.read(1, func); // Will find the model with an ID of 1\n   * model.read('1'); // Same as above\n   * //Below will find a model with foo equalling bar and hello equalling world.\n   * model.read({ foo: 'bar', hello: 'world' });\n   */\n  Model.prototype.read = function (query, callback) {\n    var queryType = typeof query === 'undefined' ? 'undefined' : _typeof(query);\n    callback = callback || function () {};\n\n    if (queryType === 'function') {\n      callback = query;\n      return this.storage.findAll(callback);\n    } else if (queryType === 'string' || queryType === 'number') {\n      query = parseInt(query, 10);\n      this.storage.find({ id: query }, callback);\n    } else {\n      this.storage.find(query, callback);\n    }\n  };\n\n  /**\n   * Updates a model by giving it an ID, data to update, and a callback to fire when\n   * the update is complete.\n   *\n   * @param {number} id The id of the model to update\n   * @param {object} data The properties to update and their new value\n   * @param {function} callback The callback to fire when the update is complete.\n   */\n  Model.prototype.update = function (id, data, callback) {\n    this.storage.save(data, callback, id);\n  };\n\n  /**\n   * Removes a model from storage\n   *\n   * @param {number} id The ID of the model to remove\n   * @param {function} callback The callback to fire when the removal is complete.\n   */\n  Model.prototype.remove = function (id, callback) {\n    this.storage.remove(id, callback);\n  };\n\n  /**\n   * WARNING: Will remove ALL data from storage.\n   *\n   * @param {function} callback The callback to fire when the storage is wiped.\n   */\n  Model.prototype.removeAll = function (callback) {\n    this.storage.drop(callback);\n  };\n\n  /**\n   * Returns a count of all todos\n   */\n  Model.prototype.getCount = function (callback) {\n    var todos = {\n      active: 0,\n      completed: 0,\n      total: 0\n    };\n\n    this.storage.findAll(function (data) {\n      data.forEach(function (todo) {\n        if (todo.completed) {\n          todos.completed++;\n        } else {\n          todos.active++;\n        }\n\n        todos.total++;\n      });\n      callback(todos);\n    });\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.Model = Model;\n})(window);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (window) {\n  'use strict';\n\n  /**\n   * Creates a new client side storage object and will create an empty\n   * collection if no collection already exists.\n   *\n   * @param {string} name The name of our DB we want to use\n   * @param {function} callback Our fake DB uses callbacks because in\n   * real life you probably would be making AJAX calls\n   */\n\n  function Store(name, callback) {\n    callback = callback || function () {};\n\n    this._dbName = name;\n\n    if (!localStorage[name]) {\n      var data = {\n        todos: []\n      };\n\n      localStorage[name] = JSON.stringify(data);\n    }\n\n    callback.call(this, JSON.parse(localStorage[name]));\n  }\n\n  /**\n   * Finds items based on a query given as a JS object\n   *\n   * @param {object} query The query to match against (i.e. {foo: 'bar'})\n   * @param {function} callback   The callback to fire when the query has\n   * completed running\n   *\n   * @example\n   * db.find({foo: 'bar', hello: 'world'}, function (data) {\n  *\t // data will return any items that have foo: bar and\n  *\t // hello: world in their properties\n  * });\n   */\n  Store.prototype.find = function (query, callback) {\n    if (!callback) {\n      return;\n    }\n\n    var todos = JSON.parse(localStorage[this._dbName]).todos;\n\n    callback.call(this, todos.filter(function (todo) {\n      for (var q in query) {\n        if (query[q] !== todo[q]) {\n          return false;\n        }\n      }\n      return true;\n    }));\n  };\n\n  /**\n   * Will retrieve all data from the collection\n   *\n   * @param {function} callback The callback to fire upon retrieving data\n   */\n  Store.prototype.findAll = function (callback) {\n    callback = callback || function () {};\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n  };\n\n  /**\n   * Will save the given data to the DB. If no item exists it will create a new\n   * item, otherwise it'll simply update an existing item's properties\n   *\n   * @param {object} updateData The data to save back into the DB\n   * @param {function} callback The callback to fire after saving\n   * @param {number} id An optional param to enter an ID of an item to update\n   */\n  Store.prototype.save = function (updateData, callback, id) {\n    var data = JSON.parse(localStorage[this._dbName]);\n    var todos = data.todos;\n\n    callback = callback || function () {};\n\n    // If an ID was actually given, find the item and update each property\n    if (id) {\n      for (var i = 0; i < todos.length; i++) {\n        if (todos[i].id === id) {\n          for (var key in updateData) {\n            if (updateData.hasOwnProperty(key)) {\n              todos[i][key] = updateData[key];\n            }\n          }\n          break;\n        }\n      }\n\n      localStorage[this._dbName] = JSON.stringify(data);\n      callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n    } else {\n      // Generate an ID\n      updateData.id = new Date().getTime();\n\n      todos.push(updateData);\n      localStorage[this._dbName] = JSON.stringify(data);\n      callback.call(this, [updateData]);\n    }\n  };\n\n  /**\n   * Will remove an item from the Store based on its ID\n   *\n   * @param {number} id The ID of the item you want to remove\n   * @param {function} callback The callback to fire after saving\n   */\n  Store.prototype.remove = function (id, callback) {\n    var data = JSON.parse(localStorage[this._dbName]);\n    var todos = data.todos;\n\n    for (var i = 0; i < todos.length; i++) {\n      if (todos[i].id == id) {\n        // eslint-disable-line\n        todos.splice(i, 1);\n        break;\n      }\n    }\n\n    localStorage[this._dbName] = JSON.stringify(data);\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n  };\n\n  /**\n   * Will drop all storage and start fresh\n   *\n   * @param {function} callback The callback to fire after dropping the data\n   */\n  Store.prototype.drop = function (callback) {\n    localStorage[this._dbName] = JSON.stringify({ todos: [] });\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos);\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.Store = Store;\n})(window);\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n(function (window) {\n  'use strict';\n\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#x27;',\n    '`': '&#x60;'\n  };\n\n  var escapeHtmlChar = function escapeHtmlChar(chr) {\n    return htmlEscapes[chr];\n  };\n\n  var reUnescapedHtml = /[&<>\"'`]/g;\n  var reHasUnescapedHtml = new RegExp(reUnescapedHtml.source);\n\n  var escape = function escape(string) {\n    return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;\n  };\n\n  /**\n   * Sets up defaults for all the Template methods such as a default template\n   *\n   * @constructor\n   */\n  function Template() {\n    this.defaultTemplate = '<li data-id=\"{{id}}\" class=\"{{completed}}\">' + '<div class=\"view\">' + '<input class=\"toggle\" type=\"checkbox\" {{checked}}>' + '<label>{{title}}</label>' + '<button class=\"destroy\"></button>' + '</div>' + '</li>';\n  }\n\n  /**\n   * Creates an <li> HTML string and returns it for placement in your app.\n   *\n   * NOTE: In real life you should be using a templating engine such as Mustache\n   * or Handlebars, however, this is a vanilla JS example.\n   *\n   * @param {object} data The object containing keys you want to find in the\n   *                      template to replace.\n   * @returns {string} HTML String of an <li> element\n   *\n   * @example\n   * view.show({\n  *\tid: 1,\n  *\ttitle: \"Hello World\",\n  *\tcompleted: 0,\n  * });\n   */\n  Template.prototype.show = function (data) {\n    var i, l;\n    var view = '';\n\n    for (i = 0, l = data.length; i < l; i++) {\n      var template = this.defaultTemplate;\n      var completed = '';\n      var checked = '';\n\n      if (data[i].completed) {\n        completed = 'completed';\n        checked = 'checked';\n      }\n\n      template = template.replace('{{id}}', data[i].id);\n      template = template.replace('{{title}}', escape(data[i].title));\n      template = template.replace('{{completed}}', completed);\n      template = template.replace('{{checked}}', checked);\n\n      view = view + template;\n    }\n\n    return view;\n  };\n\n  /**\n   * Displays a counter of how many to dos are left to complete\n   *\n   * @param {number} activeTodos The number of active todos.\n   * @returns {string} String containing the count\n   */\n  Template.prototype.itemCounter = function (activeTodos) {\n    var plural = activeTodos === 1 ? '' : 's';\n\n    return '<strong>' + activeTodos + '</strong> item' + plural + ' left';\n  };\n\n  /**\n   * Updates the text within the \"Clear completed\" button\n   *\n   * @param  {[type]} completedTodos The number of completed todos.\n   * @returns {string} String containing the count\n   */\n  Template.prototype.clearCompletedButton = function (completedTodos) {\n    if (completedTodos > 0) {\n      return 'Clear completed';\n    } else {\n      return '';\n    }\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.Template = Template;\n})(window);\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*global qs, qsa, $on, $parent, $delegate */\n/* eslint no-invalid-this: 0 */\n\n(function (window) {\n  'use strict';\n\n  /**\n   * View that abstracts away the browser's DOM completely.\n   * It has two simple entry points:\n   *\n   *   - bind(eventName, handler)\n   *     Takes a todo application event and registers the handler\n   *   - render(command, parameterObject)\n   *     Renders the given command with the options\n   */\n\n  function View(template) {\n    this.template = template;\n\n    this.ENTER_KEY = 13;\n    this.ESCAPE_KEY = 27;\n\n    this.$todoList = qs('.todo-list');\n    this.$todoItemCounter = qs('.todo-count');\n    this.$clearCompleted = qs('.clear-completed');\n    this.$main = qs('.main');\n    this.$footer = qs('.footer');\n    this.$toggleAll = qs('.toggle-all');\n    this.$newTodo = qs('.new-todo');\n  }\n\n  View.prototype._removeItem = function (id) {\n    var elem = qs('[data-id=\"' + id + '\"]');\n\n    if (elem) {\n      this.$todoList.removeChild(elem);\n    }\n  };\n\n  View.prototype._clearCompletedButton = function (completedCount, visible) {\n    this.$clearCompleted.innerHTML = this.template.clearCompletedButton(completedCount);\n    this.$clearCompleted.style.display = visible ? 'block' : 'none';\n  };\n\n  View.prototype._setFilter = function (currentPage) {\n    qs('.filters .selected').className = '';\n    qs('.filters [href=\"#/' + currentPage + '\"]').className = 'selected';\n  };\n\n  View.prototype._elementComplete = function (id, completed) {\n    var listItem = qs('[data-id=\"' + id + '\"]');\n\n    if (!listItem) {\n      return;\n    }\n\n    listItem.className = completed ? 'completed' : '';\n\n    // In case it was toggled from an event and not by clicking the checkbox\n    qs('input', listItem).checked = completed;\n  };\n\n  View.prototype._editItem = function (id, title) {\n    var listItem = qs('[data-id=\"' + id + '\"]');\n\n    if (!listItem) {\n      return;\n    }\n\n    listItem.className = listItem.className + ' editing';\n\n    var input = document.createElement('input');\n    input.className = 'edit';\n\n    listItem.appendChild(input);\n    input.focus();\n    input.value = title;\n  };\n\n  View.prototype._editItemDone = function (id, title) {\n    var listItem = qs('[data-id=\"' + id + '\"]');\n\n    if (!listItem) {\n      return;\n    }\n\n    var input = qs('input.edit', listItem);\n    listItem.removeChild(input);\n\n    listItem.className = listItem.className.replace('editing', '');\n\n    qsa('label', listItem).forEach(function (label) {\n      label.textContent = title;\n    });\n  };\n\n  View.prototype.render = function (viewCmd, parameter) {\n    var that = this;\n    var viewCommands = {\n      showEntries: function showEntries() {\n        that.$todoList.innerHTML = that.template.show(parameter);\n      },\n      removeItem: function removeItem() {\n        that._removeItem(parameter);\n      },\n      updateElementCount: function updateElementCount() {\n        that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter);\n      },\n      clearCompletedButton: function clearCompletedButton() {\n        that._clearCompletedButton(parameter.completed, parameter.visible);\n      },\n      contentBlockVisibility: function contentBlockVisibility() {\n        that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none';\n      },\n      toggleAll: function toggleAll() {\n        that.$toggleAll.checked = parameter.checked;\n      },\n      setFilter: function setFilter() {\n        that._setFilter(parameter);\n      },\n      clearNewTodo: function clearNewTodo() {\n        that.$newTodo.value = '';\n      },\n      elementComplete: function elementComplete() {\n        that._elementComplete(parameter.id, parameter.completed);\n      },\n      editItem: function editItem() {\n        that._editItem(parameter.id, parameter.title);\n      },\n      editItemDone: function editItemDone() {\n        that._editItemDone(parameter.id, parameter.title);\n      }\n    };\n\n    viewCommands[viewCmd]();\n  };\n\n  View.prototype._itemId = function (element) {\n    var li = $parent(element, 'li');\n    return parseInt(li.dataset.id, 10);\n  };\n\n  View.prototype._bindItemEditDone = function (handler) {\n    var that = this;\n    $delegate(that.$todoList, 'li .edit', 'blur', function () {\n      if (!this.dataset.iscanceled) {\n        handler({\n          id: that._itemId(this),\n          title: this.value\n        });\n      }\n    });\n\n    $delegate(that.$todoList, 'li .edit', 'keypress', function (event) {\n      if (event.keyCode === that.ENTER_KEY) {\n        // Remove the cursor from the input when you hit enter just like if it\n        // were a real form\n        this.blur();\n      }\n    });\n  };\n\n  View.prototype._bindItemEditCancel = function (handler) {\n    var that = this;\n    $delegate(that.$todoList, 'li .edit', 'keyup', function (event) {\n      if (event.keyCode === that.ESCAPE_KEY) {\n        this.dataset.iscanceled = true;\n        this.blur();\n\n        handler({ id: that._itemId(this) });\n      }\n    });\n  };\n\n  View.prototype.bind = function (event, handler) {\n    // eslint-disable-line\n    var that = this;\n    if (event === 'newTodo') {\n      $on(that.$newTodo, 'change', function () {\n        handler(that.$newTodo.value);\n      });\n    } else if (event === 'removeCompleted') {\n      $on(that.$clearCompleted, 'click', function () {\n        handler();\n      });\n    } else if (event === 'toggleAll') {\n      $on(that.$toggleAll, 'click', function () {\n        handler({ completed: this.checked });\n      });\n    } else if (event === 'itemEdit') {\n      $delegate(that.$todoList, 'li label', 'dblclick', function () {\n        handler({ id: that._itemId(this) });\n      });\n    } else if (event === 'itemRemove') {\n      $delegate(that.$todoList, '.destroy', 'click', function () {\n        handler({ id: that._itemId(this) });\n      });\n    } else if (event === 'itemToggle') {\n      $delegate(that.$todoList, '.toggle', 'click', function () {\n        handler({\n          id: that._itemId(this),\n          completed: this.checked\n        });\n      });\n    } else if (event === 'itemEditDone') {\n      that._bindItemEditDone(handler);\n    } else if (event === 'itemEditCancel') {\n      that._bindItemEditCancel(handler);\n    }\n  };\n\n  // Export to window\n  window.app = window.app || {};\n  window.app.View = View;\n})(window);\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ })\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// bundle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/src/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4b817a742be0ac36b7e5","/*global NodeList */\n(function(window) {\n  'use strict'\n\n  // Get element(s) by CSS selector:\n  window.qs = function(selector, scope) {\n    return (scope || document).querySelector(selector)\n  }\n\n  window.qsa = function(selector, scope) {\n    return (scope || document).querySelectorAll(selector)\n  }\n\n\n  window.log = function log() {\n    if (window.console && window.console.log) {\n      window.console.log.apply(window.console, arguments) // eslint-disable-line\n    }\n  }\n\n  // addEventListener wrapper:\n  window.$on = function(target, type, callback, useCapture) {\n    target.addEventListener(type, callback, !!useCapture)\n  }\n\n  // Attach a handler to event for all elements that match the selector,\n  // now or in the future, based on a root element\n  window.$delegate = function(target, selector, type, handler) {\n    function dispatchEvent(event) {\n      var targetElement = event.target\n      var potentialElements = window.qsa(selector, target)\n      var hasMatch = Array.prototype.indexOf.call(potentialElements, targetElement) >= 0\n\n      if (hasMatch) {\n        handler.call(targetElement, event)\n      }\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/Events/blur\n    var useCapture = type === 'blur' || type === 'focus'\n\n    window.$on(target, type, dispatchEvent, useCapture)\n  }\n\n  // Find the element's parent with the given tag name:\n  // $parent(qs('a'), 'div');\n  window.$parent = function(element, tagName) {\n    if (!element.parentNode) {\n      return\n    }\n    if (element.parentNode.tagName.toLowerCase() === tagName.toLowerCase()) {\n      return element.parentNode\n    }\n    return window.$parent(element.parentNode, tagName)\n  }\n\n  // removes an element from an array\n  // const x = [1,2,3]\n  // remove(x, 2)\n  // x ~== [1,3]\n  window.remove = function remove(array, thing) {\n    const index = array.indexOf(thing)\n    if (index === -1) {\n      return array\n    }\n    array.splice(index, 1)\n  }\n\n  // pad the left of the given string by the given size with the given character\n  // leftPad('10', 3, '0') -> 010\n  window.leftPad = function leftPad(str, size, padWith) {\n    if (size <= str.length) {\n      return str\n    } else {\n      return Array(size - str.length + 1).join(padWith || '0') + str\n    }\n  }\n\n  // Allow for looping on nodes by chaining:\n  // qsa('.foo').forEach(function () {})\n  NodeList.prototype.forEach = Array.prototype.forEach\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./helpers.js","/* global app, log */\nrequire('./../styles/styles.scss');\n\nrequire('./view')\nrequire('./helpers')\nrequire('./controller')\nrequire('./model')\nrequire('./store')\nrequire('./template')\n\n(function(window) {\n  'use strict'\n\n  /**\n   * Sets up a brand new Todo list.\n   *\n   * @param {string} name The name of your new to do list.\n   */\n  function Todo(name) {\n    this.storage = new app.Store(name)\n    this.model = new app.Model(this.storage)\n    this.template = new app.Template()\n    this.view = new app.View(this.template)\n    this.controller = new app.Controller(this.model, this.view)\n  }\n\n  function onLoad() {\n    var todo = new Todo('todos-vanillajs')\n    todo.controller.setView(document.location.hash)\n    log('view set')\n  }\n\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.onLoad = onLoad\n})(window)\n\n\n// WEBPACK FOOTER //\n// ./app.js","/* global app, $on */\n\n'use strict'\n\nrequire('./app')\nrequire('./helpers')\n\n$on(window, 'load', app.onLoad)\n$on(window, 'hashchange', app.onLoad)\n\n\n\n\n// WEBPACK FOOTER //\n// ./bootstrap.js","(function(window) {\n  'use strict'\n\n  /**\n   * Takes a model and view and acts as the controller between them\n   *\n   * @constructor\n   * @param {object} model The model instance\n   * @param {object} view The view instance\n   */\n  function Controller(model, view) {\n    var that = this\n    that.model = model\n    that.view = view\n\n    that.view.bind('newTodo', function(title) {\n      that.addItem(title)\n    })\n\n    that.view.bind('itemEdit', function(item) {\n      that.editItem(item.id)\n    })\n\n    that.view.bind('itemEditDone', function(item) {\n      that.editItemSave(item.id, item.title)\n    })\n\n    that.view.bind('itemEditCancel', function(item) {\n      that.editItemCancel(item.id)\n    })\n\n    that.view.bind('itemRemove', function(item) {\n      that.removeItem(item.id)\n    })\n\n    that.view.bind('itemToggle', function(item) {\n      that.toggleComplete(item.id, item.completed)\n    })\n\n    that.view.bind('removeCompleted', function() {\n      that.removeCompletedItems()\n    })\n\n    that.view.bind('toggleAll', function(status) {\n      that.toggleAll(status.completed)\n    })\n  }\n\n  /**\n   * Loads and initialises the view\n   *\n   * @param {string} '' | 'active' | 'completed'\n   */\n  Controller.prototype.setView = function(locationHash) {\n    var route = locationHash.split('/')[1]\n    var page = route || ''\n    this._updateFilterState(page)\n  }\n\n  /**\n   * An event to fire on load. Will get all items and display them in the\n   * todo-list\n   */\n  Controller.prototype.showAll = function() {\n    var that = this\n    that.model.read(function(data) {\n      that.view.render('showEntries', data)\n    })\n  }\n\n  /**\n   * Renders all active tasks\n   */\n  Controller.prototype.showActive = function() {\n    var that = this\n    that.model.read({completed: false}, function(data) {\n      that.view.render('showEntries', data)\n    })\n  }\n\n  /**\n   * Renders all completed tasks\n   */\n  Controller.prototype.showCompleted = function() {\n    var that = this\n    that.model.read({completed: true}, function(data) {\n      that.view.render('showEntries', data)\n    })\n  }\n\n  /**\n   * An event to fire whenever you want to add an item. Simply pass in the event\n   * object and it'll handle the DOM insertion and saving of the new item.\n   */\n  Controller.prototype.addItem = function(title) {\n    var that = this\n\n    if (title.trim() === '') {\n      return\n    }\n\n    that.model.create(title, function() {\n      that.view.render('clearNewTodo')\n      that._filter(true)\n    })\n  }\n\n  /*\n   * Triggers the item editing mode.\n   */\n  Controller.prototype.editItem = function(id) {\n    var that = this\n    that.model.read(id, function(data) {\n      that.view.render('editItem', {id: id, title: data[0].title})\n    })\n  }\n\n  /*\n   * Finishes the item editing mode successfully.\n   */\n  Controller.prototype.editItemSave = function(id, title) {\n    var that = this\n    if (title.trim()) {\n      that.model.update(id, {title: title}, function() {\n        that.view.render('editItemDone', {id: id, title: title})\n      })\n    } else {\n      that.removeItem(id)\n    }\n  }\n\n  /*\n   * Cancels the item editing mode.\n   */\n  Controller.prototype.editItemCancel = function(id) {\n    var that = this\n    that.model.read(id, function(data) {\n      that.view.render('editItemDone', {id: id, title: data[0].title})\n    })\n  }\n\n  /**\n   * By giving it an ID it'll find the DOM element matching that ID,\n   * remove it from the DOM and also remove it from storage.\n   *\n   * @param {number} id The ID of the item to remove from the DOM and\n   * storage\n   */\n  Controller.prototype.removeItem = function(id) {\n    var that = this\n    that.model.remove(id, function() {\n      that.view.render('removeItem', id)\n    })\n\n    that._filter()\n  }\n\n  /**\n   * Will remove all completed items from the DOM and storage.\n   */\n  Controller.prototype.removeCompletedItems = function() {\n    var that = this\n    that.model.read({completed: true}, function(data) {\n      data.forEach(function(item) {\n        that.removeItem(item.id)\n      })\n    })\n\n    that._filter()\n  }\n\n  /**\n   * Give it an ID of a model and a checkbox and it will update the item\n   * in storage based on the checkbox's state.\n   *\n   * @param {number} id The ID of the element to complete or uncomplete\n   * @param {object} checkbox The checkbox to check the state of complete\n   *                          or not\n   * @param {boolean|undefined} silent Prevent re-filtering the todo items\n   */\n  Controller.prototype.toggleComplete = function(id, completed, silent) {\n    var that = this\n    that.model.update(id, {completed: completed}, function() {\n      that.view.render('elementComplete', {\n        id: id,\n        completed: completed\n      })\n    })\n\n    if (!silent) {\n      that._filter()\n    }\n  }\n\n  /**\n   * Will toggle ALL checkboxes' on/off state and completeness of models.\n   * Just pass in the event object.\n   */\n  Controller.prototype.toggleAll = function(completed) {\n    var that = this\n    that.model.read({completed: !completed}, function(data) {\n      data.forEach(function(item) {\n        that.toggleComplete(item.id, completed, true)\n      })\n    })\n\n    that._filter()\n  }\n\n  /**\n   * Updates the pieces of the page which change depending on the remaining\n   * number of todos.\n   */\n  Controller.prototype._updateCount = function() {\n    var that = this\n    that.model.getCount(function(todos) {\n      that.view.render('updateElementCount', todos.active)\n      that.view.render('clearCompletedButton', {\n        completed: todos.completed,\n        visible: todos.completed > 0\n      })\n\n      that.view.render('toggleAll', {checked: todos.completed === todos.total})\n      that.view.render('contentBlockVisibility', {visible: todos.total > 0})\n    })\n  }\n\n  /**\n   * Re-filters the todo items, based on the active route.\n   * @param {boolean|undefined} force  forces a re-painting of todo items.\n   */\n  Controller.prototype._filter = function(force) {\n    var activeRoute = this._activeRoute.charAt(0).toUpperCase() + this._activeRoute.substr(1)\n\n    // Update the elements on the page, which change with each completed todo\n    this._updateCount()\n\n    // If the last active route isn't \"All\", or we're switching routes, we\n    // re-create the todo item elements, calling:\n    //   this.show[All|Active|Completed]();\n    if (force || this._lastActiveRoute !== 'All' || this._lastActiveRoute !== activeRoute) {\n      this['show' + activeRoute]()\n    }\n\n    this._lastActiveRoute = activeRoute\n  }\n\n  /**\n   * Simply updates the filter nav's selected states\n   */\n  Controller.prototype._updateFilterState = function(currentPage) {\n    // Store a reference to the active route, allowing us to re-filter todo\n    // items as they are marked complete or incomplete.\n    this._activeRoute = currentPage\n\n    if (currentPage === '') {\n      this._activeRoute = 'All'\n    }\n\n    this._filter()\n\n    this.view.render('setFilter', currentPage)\n  }\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.Controller = Controller\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./controller.js","(function(window) {\n  'use strict'\n\n  /**\n   * Creates a new Model instance and hooks up the storage.\n   *\n   * @constructor\n   * @param {object} storage A reference to the client side storage class\n   */\n  function Model(storage) {\n    this.storage = storage\n  }\n\n  /**\n   * Creates a new todo model\n   *\n   * @param {string} [title] The title of the task\n   * @param {function} [callback] The callback to fire after the model is created\n   */\n  Model.prototype.create = function(title, callback) {\n    title = title || ''\n    callback = callback || function() {\n    }\n\n    var newItem = {\n      title: title.trim(),\n      completed: false\n    }\n\n    this.storage.save(newItem, callback)\n  }\n\n  /**\n   * Finds and returns a model in storage. If no query is given it'll simply\n   * return everything. If you pass in a string or number it'll look that up as\n   * the ID of the model to find. Lastly, you can pass it an object to match\n   * against.\n   *\n   * @param {string|number|object} [query] A query to match models against\n   * @param {function} [callback] The callback to fire after the model is found\n   *\n   * @example\n   * model.read(1, func); // Will find the model with an ID of 1\n   * model.read('1'); // Same as above\n   * //Below will find a model with foo equalling bar and hello equalling world.\n   * model.read({ foo: 'bar', hello: 'world' });\n   */\n  Model.prototype.read = function(query, callback) {\n    var queryType = typeof query\n    callback = callback || function() {\n    }\n\n    if (queryType === 'function') {\n      callback = query\n      return this.storage.findAll(callback)\n    } else if (queryType === 'string' || queryType === 'number') {\n      query = parseInt(query, 10)\n      this.storage.find({id: query}, callback)\n    } else {\n      this.storage.find(query, callback)\n    }\n  }\n\n  /**\n   * Updates a model by giving it an ID, data to update, and a callback to fire when\n   * the update is complete.\n   *\n   * @param {number} id The id of the model to update\n   * @param {object} data The properties to update and their new value\n   * @param {function} callback The callback to fire when the update is complete.\n   */\n  Model.prototype.update = function(id, data, callback) {\n    this.storage.save(data, callback, id)\n  }\n\n  /**\n   * Removes a model from storage\n   *\n   * @param {number} id The ID of the model to remove\n   * @param {function} callback The callback to fire when the removal is complete.\n   */\n  Model.prototype.remove = function(id, callback) {\n    this.storage.remove(id, callback)\n  }\n\n  /**\n   * WARNING: Will remove ALL data from storage.\n   *\n   * @param {function} callback The callback to fire when the storage is wiped.\n   */\n  Model.prototype.removeAll = function(callback) {\n    this.storage.drop(callback)\n  }\n\n  /**\n   * Returns a count of all todos\n   */\n  Model.prototype.getCount = function(callback) {\n    var todos = {\n      active: 0,\n      completed: 0,\n      total: 0\n    }\n\n    this.storage.findAll(function(data) {\n      data.forEach(function(todo) {\n        if (todo.completed) {\n          todos.completed++\n        } else {\n          todos.active++\n        }\n\n        todos.total++\n      })\n      callback(todos)\n    })\n  }\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.Model = Model\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./model.js","(function(window) {\n  'use strict'\n\n  /**\n   * Creates a new client side storage object and will create an empty\n   * collection if no collection already exists.\n   *\n   * @param {string} name The name of our DB we want to use\n   * @param {function} callback Our fake DB uses callbacks because in\n   * real life you probably would be making AJAX calls\n   */\n  function Store(name, callback) {\n    callback = callback || function() {\n    }\n\n    this._dbName = name\n\n    if (!localStorage[name]) {\n      var data = {\n        todos: []\n      }\n\n      localStorage[name] = JSON.stringify(data)\n    }\n\n    callback.call(this, JSON.parse(localStorage[name]))\n  }\n\n  /**\n   * Finds items based on a query given as a JS object\n   *\n   * @param {object} query The query to match against (i.e. {foo: 'bar'})\n   * @param {function} callback   The callback to fire when the query has\n   * completed running\n   *\n   * @example\n   * db.find({foo: 'bar', hello: 'world'}, function (data) {\n\t *\t // data will return any items that have foo: bar and\n\t *\t // hello: world in their properties\n\t * });\n   */\n  Store.prototype.find = function(query, callback) {\n    if (!callback) {\n      return\n    }\n\n    var todos = JSON.parse(localStorage[this._dbName]).todos\n\n    callback.call(this, todos.filter(function(todo) {\n      for (var q in query) {\n        if (query[q] !== todo[q]) {\n          return false\n        }\n      }\n      return true\n    }))\n  }\n\n  /**\n   * Will retrieve all data from the collection\n   *\n   * @param {function} callback The callback to fire upon retrieving data\n   */\n  Store.prototype.findAll = function(callback) {\n    callback = callback || function() {\n    }\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos)\n  }\n\n  /**\n   * Will save the given data to the DB. If no item exists it will create a new\n   * item, otherwise it'll simply update an existing item's properties\n   *\n   * @param {object} updateData The data to save back into the DB\n   * @param {function} callback The callback to fire after saving\n   * @param {number} id An optional param to enter an ID of an item to update\n   */\n  Store.prototype.save = function(updateData, callback, id) {\n    var data = JSON.parse(localStorage[this._dbName])\n    var todos = data.todos\n\n    callback = callback || function() {\n    }\n\n    // If an ID was actually given, find the item and update each property\n    if (id) {\n      for (var i = 0; i < todos.length; i++) {\n        if (todos[i].id === id) {\n          for (var key in updateData) {\n            if (updateData.hasOwnProperty(key)) {\n              todos[i][key] = updateData[key]\n            }\n          }\n          break\n        }\n      }\n\n      localStorage[this._dbName] = JSON.stringify(data)\n      callback.call(this, JSON.parse(localStorage[this._dbName]).todos)\n    } else {\n      // Generate an ID\n      updateData.id = new Date().getTime()\n\n      todos.push(updateData)\n      localStorage[this._dbName] = JSON.stringify(data)\n      callback.call(this, [updateData])\n    }\n  }\n\n  /**\n   * Will remove an item from the Store based on its ID\n   *\n   * @param {number} id The ID of the item you want to remove\n   * @param {function} callback The callback to fire after saving\n   */\n  Store.prototype.remove = function(id, callback) {\n    var data = JSON.parse(localStorage[this._dbName])\n    var todos = data.todos\n\n    for (var i = 0; i < todos.length; i++) {\n      if (todos[i].id == id) { // eslint-disable-line\n        todos.splice(i, 1)\n        break\n      }\n    }\n\n    localStorage[this._dbName] = JSON.stringify(data)\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos)\n  }\n\n  /**\n   * Will drop all storage and start fresh\n   *\n   * @param {function} callback The callback to fire after dropping the data\n   */\n  Store.prototype.drop = function(callback) {\n    localStorage[this._dbName] = JSON.stringify({todos: []})\n    callback.call(this, JSON.parse(localStorage[this._dbName]).todos)\n  }\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.Store = Store\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./store.js","(function(window) {\n  'use strict'\n\n  var htmlEscapes = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    '\\'': '&#x27;',\n    '`': '&#x60;'\n  }\n\n  var escapeHtmlChar = function(chr) {\n    return htmlEscapes[chr]\n  }\n\n  var reUnescapedHtml = /[&<>\"'`]/g\n  var reHasUnescapedHtml = new RegExp(reUnescapedHtml.source)\n\n  var escape = function(string) {\n    return (string && reHasUnescapedHtml.test(string)) ?\n      string.replace(reUnescapedHtml, escapeHtmlChar) :\n      string\n  }\n\n  /**\n   * Sets up defaults for all the Template methods such as a default template\n   *\n   * @constructor\n   */\n  function Template() {\n    this.defaultTemplate = '<li data-id=\"{{id}}\" class=\"{{completed}}\">' +\n      '<div class=\"view\">' +\n      '<input class=\"toggle\" type=\"checkbox\" {{checked}}>' +\n      '<label>{{title}}</label>' +\n      '<button class=\"destroy\"></button>' +\n      '</div>' +\n      '</li>'\n  }\n\n  /**\n   * Creates an <li> HTML string and returns it for placement in your app.\n   *\n   * NOTE: In real life you should be using a templating engine such as Mustache\n   * or Handlebars, however, this is a vanilla JS example.\n   *\n   * @param {object} data The object containing keys you want to find in the\n   *                      template to replace.\n   * @returns {string} HTML String of an <li> element\n   *\n   * @example\n   * view.show({\n\t *\tid: 1,\n\t *\ttitle: \"Hello World\",\n\t *\tcompleted: 0,\n\t * });\n   */\n  Template.prototype.show = function(data) {\n    var i, l\n    var view = ''\n\n    for (i = 0, l = data.length; i < l; i++) {\n      var template = this.defaultTemplate\n      var completed = ''\n      var checked = ''\n\n      if (data[i].completed) {\n        completed = 'completed'\n        checked = 'checked'\n      }\n\n      template = template.replace('{{id}}', data[i].id)\n      template = template.replace('{{title}}', escape(data[i].title))\n      template = template.replace('{{completed}}', completed)\n      template = template.replace('{{checked}}', checked)\n\n      view = view + template\n    }\n\n    return view\n  }\n\n  /**\n   * Displays a counter of how many to dos are left to complete\n   *\n   * @param {number} activeTodos The number of active todos.\n   * @returns {string} String containing the count\n   */\n  Template.prototype.itemCounter = function(activeTodos) {\n    var plural = activeTodos === 1 ? '' : 's'\n\n    return '<strong>' + activeTodos + '</strong> item' + plural + ' left'\n  }\n\n  /**\n   * Updates the text within the \"Clear completed\" button\n   *\n   * @param  {[type]} completedTodos The number of completed todos.\n   * @returns {string} String containing the count\n   */\n  Template.prototype.clearCompletedButton = function(completedTodos) {\n    if (completedTodos > 0) {\n      return 'Clear completed'\n    } else {\n      return ''\n    }\n  }\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.Template = Template\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./template.js","/*global qs, qsa, $on, $parent, $delegate */\n/* eslint no-invalid-this: 0 */\n\n(function(window) {\n  'use strict'\n\n  /**\n   * View that abstracts away the browser's DOM completely.\n   * It has two simple entry points:\n   *\n   *   - bind(eventName, handler)\n   *     Takes a todo application event and registers the handler\n   *   - render(command, parameterObject)\n   *     Renders the given command with the options\n   */\n  function View(template) {\n    this.template = template\n\n    this.ENTER_KEY = 13\n    this.ESCAPE_KEY = 27\n\n    this.$todoList = qs('.todo-list')\n    this.$todoItemCounter = qs('.todo-count')\n    this.$clearCompleted = qs('.clear-completed')\n    this.$main = qs('.main')\n    this.$footer = qs('.footer')\n    this.$toggleAll = qs('.toggle-all')\n    this.$newTodo = qs('.new-todo')\n  }\n\n  View.prototype._removeItem = function(id) {\n    var elem = qs('[data-id=\"' + id + '\"]')\n\n    if (elem) {\n      this.$todoList.removeChild(elem)\n    }\n  }\n\n  View.prototype._clearCompletedButton = function(completedCount, visible) {\n    this.$clearCompleted.innerHTML = this.template.clearCompletedButton(completedCount)\n    this.$clearCompleted.style.display = visible ? 'block' : 'none'\n  }\n\n  View.prototype._setFilter = function(currentPage) {\n    qs('.filters .selected').className = ''\n    qs('.filters [href=\"#/' + currentPage + '\"]').className = 'selected'\n  }\n\n  View.prototype._elementComplete = function(id, completed) {\n    var listItem = qs('[data-id=\"' + id + '\"]')\n\n    if (!listItem) {\n      return\n    }\n\n    listItem.className = completed ? 'completed' : ''\n\n    // In case it was toggled from an event and not by clicking the checkbox\n    qs('input', listItem).checked = completed\n  }\n\n  View.prototype._editItem = function(id, title) {\n    var listItem = qs('[data-id=\"' + id + '\"]')\n\n    if (!listItem) {\n      return\n    }\n\n    listItem.className = listItem.className + ' editing'\n\n    var input = document.createElement('input')\n    input.className = 'edit'\n\n    listItem.appendChild(input)\n    input.focus()\n    input.value = title\n  }\n\n  View.prototype._editItemDone = function(id, title) {\n    var listItem = qs('[data-id=\"' + id + '\"]')\n\n    if (!listItem) {\n      return\n    }\n\n    var input = qs('input.edit', listItem)\n    listItem.removeChild(input)\n\n    listItem.className = listItem.className.replace('editing', '')\n\n    qsa('label', listItem).forEach(function(label) {\n      label.textContent = title\n    })\n  }\n\n  View.prototype.render = function(viewCmd, parameter) {\n    var that = this\n    var viewCommands = {\n      showEntries: function() {\n        that.$todoList.innerHTML = that.template.show(parameter)\n      },\n      removeItem: function() {\n        that._removeItem(parameter)\n      },\n      updateElementCount: function() {\n        that.$todoItemCounter.innerHTML = that.template.itemCounter(parameter)\n      },\n      clearCompletedButton: function() {\n        that._clearCompletedButton(parameter.completed, parameter.visible)\n      },\n      contentBlockVisibility: function() {\n        that.$main.style.display = that.$footer.style.display = parameter.visible ? 'block' : 'none'\n      },\n      toggleAll: function() {\n        that.$toggleAll.checked = parameter.checked\n      },\n      setFilter: function() {\n        that._setFilter(parameter)\n      },\n      clearNewTodo: function() {\n        that.$newTodo.value = ''\n      },\n      elementComplete: function() {\n        that._elementComplete(parameter.id, parameter.completed)\n      },\n      editItem: function() {\n        that._editItem(parameter.id, parameter.title)\n      },\n      editItemDone: function() {\n        that._editItemDone(parameter.id, parameter.title)\n      }\n    }\n\n    viewCommands[viewCmd]()\n  }\n\n  View.prototype._itemId = function(element) {\n    var li = $parent(element, 'li')\n    return parseInt(li.dataset.id, 10)\n  }\n\n  View.prototype._bindItemEditDone = function(handler) {\n    var that = this\n    $delegate(that.$todoList, 'li .edit', 'blur', function() {\n      if (!this.dataset.iscanceled) {\n        handler({\n          id: that._itemId(this),\n          title: this.value\n        })\n      }\n    })\n\n    $delegate(that.$todoList, 'li .edit', 'keypress', function(event) {\n      if (event.keyCode === that.ENTER_KEY) {\n        // Remove the cursor from the input when you hit enter just like if it\n        // were a real form\n        this.blur()\n      }\n    })\n  }\n\n  View.prototype._bindItemEditCancel = function(handler) {\n    var that = this\n    $delegate(that.$todoList, 'li .edit', 'keyup', function(event) {\n      if (event.keyCode === that.ESCAPE_KEY) {\n        this.dataset.iscanceled = true\n        this.blur()\n\n        handler({id: that._itemId(this)})\n      }\n    })\n  }\n\n  View.prototype.bind = function(event, handler) { // eslint-disable-line\n    var that = this\n    if (event === 'newTodo') {\n      $on(that.$newTodo, 'change', function() {\n        handler(that.$newTodo.value)\n      })\n\n    } else if (event === 'removeCompleted') {\n      $on(that.$clearCompleted, 'click', function() {\n        handler()\n      })\n\n    } else if (event === 'toggleAll') {\n      $on(that.$toggleAll, 'click', function() {\n        handler({completed: this.checked})\n      })\n\n    } else if (event === 'itemEdit') {\n      $delegate(that.$todoList, 'li label', 'dblclick', function() {\n        handler({id: that._itemId(this)})\n      })\n\n    } else if (event === 'itemRemove') {\n      $delegate(that.$todoList, '.destroy', 'click', function() {\n        handler({id: that._itemId(this)})\n      })\n\n    } else if (event === 'itemToggle') {\n      $delegate(that.$todoList, '.toggle', 'click', function() {\n        handler({\n          id: that._itemId(this),\n          completed: this.checked\n        })\n      })\n\n    } else if (event === 'itemEditDone') {\n      that._bindItemEditDone(handler)\n\n    } else if (event === 'itemEditCancel') {\n      that._bindItemEditCancel(handler)\n    }\n  }\n\n  // Export to window\n  window.app = window.app || {}\n  window.app.View = View\n})(window)\n\n\n\n// WEBPACK FOOTER //\n// ./view.js"],"sourceRoot":""}